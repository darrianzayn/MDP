//+------------------------------------------------------------------+
//|                                EA XAUUSD Simple - Anti Labil     |
//|                                No Drama, Just Profit!             |
//|                                        Copyright 2025, Simple Ver |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025 - Simple Trading"
#property link      ""
#property version   "1.00"
#property strict

//--- Input Parameters (Cuma yang penting aja!)
input group "=== üéØ CORE SETTINGS ==="
input double RiskPercent = 1.0;         // Risk per trade (%)
input int    MagicNumber = 12345;       // Magic number
input bool   UseTrailing = false;       // Use trailing stop

input group "=== üìä TECHNICAL SETTINGS ==="
input int    MA_Fast = 20;              // Fast MA period
input int    MA_Slow = 50;              // Slow MA period
input int    ATR_Period = 14;           // ATR period
input double SL_Multiplier = 2.0;       // Stop Loss = ATR x this
input double TP_Multiplier = 4.0;       // Take Profit = ATR x this

input group "=== ‚è∞ TIME FILTER ==="
input bool   UseTimeFilter = true;      // Enable time filter
input int    StartHour = 8;             // Start trading hour
input int    EndHour = 20;              // End trading hour

//--- Global Variables
datetime lastTradeTime = 0;
int totalTrades = 0;
int winTrades = 0;
double totalProfit = 0;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
    Print("üöÄ EA XAUUSD Simple - Anti Labil Version Started!");
    Print("üìä Settings:");
    Print("   - Risk: ", RiskPercent, "%");
    Print("   - MA Fast: ", MA_Fast, " | MA Slow: ", MA_Slow);
    Print("   - SL: ATR x ", SL_Multiplier, " | TP: ATR x ", TP_Multiplier);
    Print("   - Time Filter: ", UseTimeFilter ? "ON" : "OFF");
    
    if(UseTimeFilter)
        Print("   - Trading Hours: ", StartHour, ":00 - ", EndHour, ":00");
    
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
    // Check if we already have position
    if(CountOrders() > 0) 
    {
        if(UseTrailing) ManageTrailing();
        return;
    }
    
    // Time filter check
    if(!IsTimeToTrade()) return;
    
    // Minimum time between trades (30 minutes)
    if(TimeCurrent() - lastTradeTime < 1800) return;
    
    // Get technical indicators
    double maFast = iMA(Symbol(), PERIOD_CURRENT, MA_Fast, 0, MODE_SMA, PRICE_CLOSE, 1);
    double maSlow = iMA(Symbol(), PERIOD_CURRENT, MA_Slow, 0, MODE_SMA, PRICE_CLOSE, 1);
    double atr = iATR(Symbol(), PERIOD_CURRENT, ATR_Period, 1);
    
    // Simple trend detection
    bool isBullish = maFast > maSlow;
    bool isBearish = maFast < maSlow;
    
    // Additional confirmation - price above/below both MAs
    double currentPrice = (Ask + Bid) / 2;
    
    if(isBullish && currentPrice > maFast)
    {
        // BUY Signal
        OpenTrade(OP_BUY, atr);
    }
    else if(isBearish && currentPrice < maFast)
    {
        // SELL Signal
        OpenTrade(OP_SELL, atr);
    }
}

//+------------------------------------------------------------------+
//| Open Trade Function                                              |
//+------------------------------------------------------------------+
void OpenTrade(int orderType, double atr)
{
    double lotSize = CalculateLotSize(atr);
    double price, sl, tp;
    color clr;
    string comment;
    
    if(orderType == OP_BUY)
    {
        price = Ask;
        sl = Ask - (atr * SL_Multiplier);
        tp = Ask + (atr * TP_Multiplier);
        clr = clrBlue;
        comment = "Simple BUY";
    }
    else // OP_SELL
    {
        price = Bid;
        sl = Bid + (atr * SL_Multiplier);
        tp = Bid - (atr * TP_Multiplier);
        clr = clrRed;
        comment = "Simple SELL";
    }
    
    // Normalize prices
    sl = NormalizeDouble(sl, Digits);
    tp = NormalizeDouble(tp, Digits);
    
    // Send order
    int ticket = OrderSend(
        Symbol(),
        orderType,
        lotSize,
        price,
        3,
        sl,
        tp,
        comment,
        MagicNumber,
        0,
        clr
    );
    
    if(ticket > 0)
    {
        lastTradeTime = TimeCurrent();
        totalTrades++;
        
        Print("‚úÖ Trade Opened: Ticket=", ticket, 
              " | Type=", (orderType == OP_BUY ? "BUY" : "SELL"),
              " | Lot=", DoubleToStr(lotSize, 2),
              " | SL=", DoubleToStr(sl, Digits),
              " | TP=", DoubleToStr(tp, Digits));
    }
    else
    {
        Print("‚ùå Order Failed: Error=", GetLastError());
    }
}

//+------------------------------------------------------------------+
//| Calculate Lot Size based on Risk                                 |
//+------------------------------------------------------------------+
double CalculateLotSize(double atr)
{
    double balance = AccountBalance();
    double riskAmount = balance * RiskPercent / 100.0;
    double slDistance = atr * SL_Multiplier;
    
    // Calculate lot size based on risk
    double tickValue = MarketInfo(Symbol(), MODE_TICKVALUE);
    double lotSize = riskAmount / (slDistance / Point * tickValue);
    
    // Normalize lot size
    double minLot = MarketInfo(Symbol(), MODE_MINLOT);
    double maxLot = MarketInfo(Symbol(), MODE_MAXLOT);
    double lotStep = MarketInfo(Symbol(), MODE_LOTSTEP);
    
    lotSize = MathMax(minLot, MathMin(maxLot, 
              MathRound(lotSize / lotStep) * lotStep));
    
    return lotSize;
}

//+------------------------------------------------------------------+
//| Count Orders for this EA                                         |
//+------------------------------------------------------------------+
int CountOrders()
{
    int count = 0;
    for(int i = 0; i < OrdersTotal(); i++)
    {
        if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
        {
            if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber)
                count++;
        }
    }
    return count;
}

//+------------------------------------------------------------------+
//| Time Filter Function                                             |
//+------------------------------------------------------------------+
bool IsTimeToTrade()
{
    if(!UseTimeFilter) return true;
    
    int currentHour = Hour();
    
    // Check trading hours
    if(currentHour < StartHour || currentHour >= EndHour)
        return false;
    
    // Avoid Friday late and Monday early
    int dayOfWeek = DayOfWeek();
    if(dayOfWeek == 5 && currentHour >= 18) return false; // Friday 6PM+
    if(dayOfWeek == 1 && currentHour < 10) return false;  // Monday before 10AM
    
    return true;
}

//+------------------------------------------------------------------+
//| Simple Trailing Stop                                             |
//+------------------------------------------------------------------+
void ManageTrailing()
{
    double atr = iATR(Symbol(), PERIOD_CURRENT, ATR_Period, 1);
    double trailDistance = atr * 1.5; // Trailing distance
    
    for(int i = 0; i < OrdersTotal(); i++)
    {
        if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
        {
            if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber)
            {
                double currentPrice = (OrderType() == OP_BUY) ? Bid : Ask;
                double profit = (OrderType() == OP_BUY) ? 
                               (currentPrice - OrderOpenPrice()) : 
                               (OrderOpenPrice() - currentPrice);
                
                // Only trail if in profit by at least 30 pips
                if(profit > 30 * Point)
                {
                    double newSL;
                    bool shouldModify = false;
                    
                    if(OrderType() == OP_BUY)
                    {
                        newSL = currentPrice - trailDistance;
                        if(newSL > OrderStopLoss() + 5 * Point)
                            shouldModify = true;
                    }
                    else // SELL
                    {
                        newSL = currentPrice + trailDistance;
                        if(newSL < OrderStopLoss() - 5 * Point)
                            shouldModify = true;
                    }
                    
                    if(shouldModify)
                    {
                        newSL = NormalizeDouble(newSL, Digits);
                        if(OrderModify(OrderTicket(), OrderOpenPrice(), newSL, OrderTakeProfit(), 0, clrGreen))
                        {
                            Print("üìà Trailing Updated: SL=", DoubleToStr(newSL, Digits));
                        }
                    }
                }
            }
        }
    }
}

//+------------------------------------------------------------------+
//| Trade Event Handler                                              |
//+------------------------------------------------------------------+
void OnTrade()
{
    // Check for closed trades
    static int lastHistoryTotal = 0;
    int currentHistoryTotal = OrdersHistoryTotal();
    
    if(currentHistoryTotal > lastHistoryTotal)
    {
        // New closed trade
        if(OrderSelect(currentHistoryTotal - 1, SELECT_BY_POS, MODE_HISTORY))
        {
            if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber)
            {
                double profit = OrderProfit() + OrderSwap() + OrderCommission();
                totalProfit += profit;
                
                if(profit > 0)
                {
                    winTrades++;
                    Print("üéâ WIN: +$", DoubleToStr(profit, 2));
                }
                else
                {
                    Print("üìâ LOSS: -$", DoubleToStr(MathAbs(profit), 2));
                }
                
                // Print stats every 10 trades
                if(totalTrades % 10 == 0 && totalTrades > 0)
                {
                    double winRate = (double)winTrades / totalTrades * 100;
                    Print("üìä Stats: Trades=", totalTrades, 
                          " | WinRate=", DoubleToStr(winRate, 1), "%",
                          " | Total P/L=$", DoubleToStr(totalProfit, 2));
                }
            }
        }
    }
    
    lastHistoryTotal = currentHistoryTotal;
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    Print("üèÅ EA XAUUSD Simple - Session Summary:");
    Print("üìä Total Trades: ", totalTrades);
    
    if(totalTrades > 0)
    {
        double winRate = (double)winTrades / totalTrades * 100;
        Print("üéØ Win Rate: ", DoubleToStr(winRate, 1), "%");
        Print("üí∞ Total P/L: $", DoubleToStr(totalProfit, 2));
    }
    
    Print("‚úÖ Simple EA Stopped - No Drama, Just Results!");
}

//+------------------------------------------------------------------+
